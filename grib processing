# GFS Wind Data Fetcher

## Business Logic

### Purpose

- Fetch wind forecast data from NOAA's Global Forecast System (GFS)
- Provide detailed wind information for specific marine locations
- Support 3-day forecasts with 3-hour intervals

### Data Components

1. **Wind Components**

   - Wind speed (meters/second)
   - Wind direction (degrees)
   - Wind gusts
   - U/V vector components

2. **Forecast Information**
   - Station metadata (ID, latitude, longitude)
   - Forecast timestamps
   - Cycle information (date and hour)
   - 3-hourly predictions up to 72 hours

### Use Cases

1. Marine weather forecasting
2. Wind energy assessment
3. Maritime navigation
4. Weather-dependent operations planning

## Technical Implementation

### Data Source

- **NOMADS GRIB Filter Service**
  ```
  Base URL: https://nomads.ncep.noaa.gov/cgi-bin/filter_gfs_0p25.pl
  ```
- GFS 0.25-degree resolution grid
- 4 daily cycles (00Z, 06Z, 12Z, 18Z)
- GRIB2 file format

### Model Run Details

1. **Cycle Timing**

   - Model runs 4 times daily: 00Z, 06Z, 12Z, 18Z
   - Each run takes ~5.5 hours to complete
   - Data typically available ~6 hours after cycle start
   - Example: 00Z run available around 06Z

2. **File Availability Pattern**

   ```
   gfs.YYYYMMDD/HH/atmos/gfs.tHHz.pgrb2.0p25.{suffix}
   where:
   - YYYYMMDD = date (e.g., 20250217)
   - HH = cycle hour (00/06/12/18)
   - suffix = anl (analysis) or fNNN (forecast hour)
   ```

3. **Data Retention**
   - Latest 10 days of forecasts retained
   - Older data moved to NOMADS archive
   - Historical data requires different access methods

### URL Construction

1. **Base Parameters**

   ```
   ?dir=/gfs.{date}/{cycle}/atmos
   &file=gfs.t{cycle}z.pgrb2.0p25.{suffix}
   &var_UGRD=on
   &var_VGRD=on
   &var_GUST=on
   &lev_10_m_above_ground=on
   &lev_surface=on
   ```

2. **Subregion Parameters**

   ```
   &subregion=
   &toplat={station_lat + 0.5}
   &bottomlat={station_lat - 0.5}
   &leftlon={station_lon - 0.5}
   &rightlon={station_lon + 0.5}
   ```

3. **Complete URL Example**
   ```
   https://nomads.ncep.noaa.gov/cgi-bin/filter_gfs_0p25.pl?dir=/gfs.20250217/12/atmos&file=gfs.t12z.pgrb2.0p25.f000&var_UGRD=on&var_VGRD=on&var_GUST=on&lev_10_m_above_ground=on&lev_surface=on&subregion=&toplat=43.3&bottomlat=42.3&leftlon=289.33&rightlon=290.33
   ```

### Timing Logic

1. **Finding Latest Available Cycle**

   ```python
   current_hour = utc_now.hour
   current_cycle = max(cycle for cycle in [0, 6, 12, 18] if cycle <= current_hour)

   # Check if current cycle is available (current_hour >= cycle + 6)
   if current_hour < current_cycle + 6:
       # Fall back to previous cycle
       current_cycle = previous_cycle_in_sequence
   ```

2. **Forecast Hours**
   - Analysis (hour 0): `.anl` suffix
   - Forecasts: `.f{hour:03d}` suffix
   - Hours sequence: [0, 3, 6, ..., 72]
   - 3-hourly intervals for efficiency

### GRIB2 Data Structure

1. **Variable Names**

   - `u10`: 10m U-component of wind
   - `v10`: 10m V-component of wind
   - `gust`: Surface wind gust
   - Alternative names: `UGRD`, `VGRD`, `GUST`

2. **Data Dimensions**

   - Time: forecast validity time
   - Latitude: 0.25° resolution
   - Longitude: 0.25° resolution
   - Level: surface or 10m above ground

3. **Grid Point Selection**
   ```python
   # In 4x4 subregion grid (0.25° resolution within 1° box)
   lat_idx = 2  # Center point
   lon_idx = 2  # Center point
   ```

### Key Features

1. **Efficient Data Retrieval**

   - Subregion filtering (1-degree bounding box)
   - Variable filtering (UGRD, VGRD, GUST)
   - Level filtering (10m above ground, surface)
   - Analysis file (.anl) for current conditions
   - Forecast files (.fNNN) for predictions

2. **Grid Processing**

   - 0.25-degree resolution
   - 4x4 grid points in subregion
   - Center point extraction for station location
   - Coordinate conversion (negative to 0-360 range)

3. **Wind Calculations**
   ```python
   speed = sqrt(u_wind² + v_wind²)
   direction = (270 - atan2(v_wind, u_wind)) % 360
   ```

### Data Flow

1. **Request Construction**

   - Build URL with parameters
   - Handle coordinate transformations
   - Manage file suffixes (anl/fNNN)

2. **Data Fetching**

   - Asynchronous HTTP requests
   - GRIB2 file download
   - Temporary file management

3. **Data Processing**

   - GRIB2 parsing with xarray/cfgrib
   - Variable extraction
   - Coordinate mapping
   - Wind vector calculations

4. **Output Format**
   ```json
   {
     "station_id": "44098",
     "location": {
       "latitude": 42.8,
       "longitude": -70.17
     },
     "cycle": {
       "date": "20250217",
       "hour": "12"
     },
     "forecasts": [
       {
         "timestamp": "2025-02-17T12:00:00",
         "forecast_hour": 0,
         "wind": {
           "speed_ms": 8.45,
           "direction_deg": 270.5,
           "u_wind": -8.2,
           "v_wind": 2.1,
           "gust_ms": 12.3
         }
       }
     ]
   }
   ```

### Error Handling

1. **Network Errors**

   - HTTP status checks
   - Connection timeouts
   - Retry logic

2. **Data Validation**

   - Variable presence checks
   - Dimension validation
   - Coordinate bounds checking

3. **File Management**
   - Temporary file cleanup
   - Output directory creation
   - JSON file writing

### Dependencies

- aiohttp: Async HTTP requests
- xarray: GRIB2 file processing
- cfgrib: GRIB file engine
- numpy: Numerical operations
- pathlib: File path handling

### Performance Considerations

1. **Data Efficiency**

   - Subregion filtering reduces download size
   - Variable filtering minimizes processing
   - 3-hour intervals balance detail and size

2. **Processing Optimization**

   - Asynchronous operations
   - Temporary file management
   - Memory-efficient GRIB processing

3. **Storage Management**
   - JSON output for easy consumption
   - Organized file structure
   - Cleanup of temporary files

### Implementation Steps

1. **Setup**

   ```python
   # Required environment
   - Python 3.8+
   - eccodes library (for cfgrib)
   - ~2GB disk space for temporary files
   ```

2. **Initialization**

   ```python
   # Directory structure
   /wind_data/           # Output directory
   /tmp/                 # Temporary GRIB files
   ```

3. **Processing Flow**
   ```python
   1. Determine latest available cycle
   2. For each forecast hour (0-72, 3-hour steps):
      a. Construct filter URL
      b. Download filtered GRIB2
      c. Extract wind components
      d. Calculate derived values
      e. Clean up temporary files
   3. Save JSON output
   ```

## Usage Example

```python
station_info = {
    "id": "44098",
    "latitude": 42.80,
    "longitude": -70.17
}

fetcher = GFSWindFetcher()
wind_data = await fetcher.get_wind_data(
    station_info["id"],
    station_info["latitude"],
    station_info["longitude"],
    "20250217",  # YYYYMMDD
    "12"         # Hour (UTC)
)
```
