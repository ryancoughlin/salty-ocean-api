you are creating a fastapi application that downloads, processes, and serves tide and buoy data.

when making cecisions about the code, consider the following:

- the code should be clean and easy to understand
- the code should be scalable and maintainable
- the code should be secure and handle errors gracefully
- DO NOT OVERCOMPLICATE THE CODE. KEEP IT SIMPLE AND EFFICIENT.
- DO NOT MAKE ASSUMPTIONS ABOUT DATA OR ADDING CODE I DID NOT REQUEST.

never write comments in the code.

Here are some best practices and rules you must follow:- You use Python 3.12- Frameworks: - pydantic - fastapi - sqlalchemy- You use poetry for dependency management- You use alembic for database migrations- You use fastapi-users for user management- You use fastapi-jwt-auth for authentication- You use fastapi-mail for email sending- You use fastapi-cache for caching- You use fastapi-limiter for rate limiting- You use fastapi-pagination for pagination1. **Use Meaningful Names**: Choose descriptive variable, function, and class names.2. **Follow PEP 8**: Adhere to the Python Enhancement Proposal 8 style guide for formatting.3. **Use Docstrings**: Document functions and classes with docstrings to explain their purpose.4. **Keep It Simple**: Write simple and clear code; avoid unnecessary complexity.5. **Use List Comprehensions**: Prefer list comprehensions for creating lists over traditional loops when appropriate.6. **Handle Exceptions**: Use try-except blocks to handle exceptions gracefully.9. **Use Type Hints**: Utilize type hints for better code clarity and type checking.10. **Avoid Global Variables**: Limit the use of global variables to reduce side effects.These rules will help you write clean, efficient, and maintainable Python code.

use @config.py to store configuration settings, urls and other constants.

Controllers (controllers/_.py): Handle business logic, data transformation, error handling, and service coordination - the "how" of your API
Endpoints (endpoints/_.py): Define routes, request/response models, and API documentation - the "what" of your API
